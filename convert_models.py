#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÊâπÈáèËΩ¨Êç¢ÈÖçÁΩÆÊñá‰ª∂ËÑöÊú¨
ÂäüËÉΩÔºö
1. ÊîØÊåÅÂ∞ÜÈÖçÁΩÆÊñá‰ª∂‰∏≠ÁöÑÊ®°ÂûãÊõøÊç¢‰∏∫ÊåáÂÆöÁöÑApiModelÊàñLocalModelÈÖçÁΩÆ
2. Ëá™Âä®Êõ¥Êñ∞tasks‰∏≠ÁöÑllm_model_nameÂºïÁî®
3. ÊîØÊåÅ‰ªéÂ§ñÈÉ®‰º†ÂÖ•ÈÖçÁΩÆÊàñ‰ªéJSONÊñá‰ª∂ËØªÂèñÈÖçÁΩÆ
"""

import os
import yaml
import re
import json
import sys
from pathlib import Path
from typing import Dict, Any

def get_default_config() -> Dict[str, Any]:
    """
    ËøîÂõûÈªòËÆ§ÁöÑopenai_evaluatorÈÖçÁΩÆ
    """
    return {
        "model_type": "api",
        "model_name": "openai_evaluator",
        "class": "ApiModel",
        "config": {
            "provider": "url",
            "model_identifier": "YOUR_MODEL",
            "api_key": "YOUR_API_KEY",
            "base_url": "YOUR_BASE_URL",
            "concurrency": 1
        }
    }

def main(external_config: Dict[str, Any] = None):
    """
    ‰∏ªÂáΩÊï∞ÔºöÊâπÈáèÂ§ÑÁêÜÊâÄÊúâÈÖçÁΩÆÊñá‰ª∂
    external_config: Â§ñÈÉ®‰º†ÂÖ•ÁöÑÈÖçÁΩÆÔºåÂ¶ÇÊûúÊèê‰æõÂàô‰ΩøÁî®ËØ•ÈÖçÁΩÆ
    """
    # Ëé∑ÂèñtestÁõÆÂΩï‰∏ãÊâÄÊúâYAMLÊñá‰ª∂
    test_dir = Path('./test')
    yaml_files = list(test_dir.glob('*.yaml'))
    
    if not yaml_files:
        print("‚ùå Âú®testÁõÆÂΩï‰∏ãÊú™ÊâæÂà∞‰ªª‰ΩïYAMLÊñá‰ª∂")
        return
    
    # Â¶ÇÊûúÊèê‰æõ‰∫ÜÂ§ñÈÉ®ÈÖçÁΩÆÔºå‰ΩøÁî®ÂÆÉÔºõÂê¶Âàô‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ
    target_config = external_config if external_config else get_default_config()
    
    print(f"ÊâæÂà∞ {len(yaml_files)} ‰∏™YAMLÈÖçÁΩÆÊñá‰ª∂")
    if external_config:
        model_id = external_config.get('config', {}).get('model_identifier', 
                   external_config.get('config', {}).get('model_path', 'unknown'))
        model_type = external_config.get('model_type', 'unknown')
        model_name = external_config.get('model_name', 'unknown')
        print(f"‰ΩøÁî®Â§ñÈÉ®ÈÖçÁΩÆÔºåÊ®°ÂûãÁ±ªÂûã: {model_type}, Ê®°ÂûãÂêçÁß∞: {model_name}, Ê®°ÂûãÊ†áËØÜ: {model_id}")
    print("=" * 60)
    
    modified_yaml_count = 0
    total_yaml_count = len(yaml_files)
    
    # ÈÄê‰∏™Â§ÑÁêÜYAMLÊñá‰ª∂
    for yaml_file in sorted(yaml_files):
        print(f"\nÂ§ÑÁêÜÊñá‰ª∂: {yaml_file.name}")
        if update_yaml_config_with_target(yaml_file, target_config):
            modified_yaml_count += 1
    
    # ËæìÂá∫ÊÄªÁªì
    print("\n" + "=" * 60)
    print(f"Â§ÑÁêÜÂÆåÊàêÔºÅ")
    print(f"YAMLÊñá‰ª∂ÊÄªÊï∞: {total_yaml_count}")
    print(f"YAMLÊñá‰ª∂Â∑≤‰øÆÊîπ: {modified_yaml_count}")
    print(f"YAMLÊñá‰ª∂Êú™‰øÆÊîπ: {total_yaml_count - modified_yaml_count}")
    
    if modified_yaml_count > 0:
        model_name = target_config.get('model_name', 'unknown')
        model_type = target_config.get('model_type', 'unknown')
        print(f"\nüéâ ËΩ¨Êç¢ÂÆåÊàêÔºÅÂ∑≤ÊàêÂäüÊõ¥Êñ∞ÈÖçÁΩÆ‰∏∫Ê®°Âûã: {model_name} (Á±ªÂûã: {model_type})")
    else:
        print(f"\n‚úÖ ÊâÄÊúâÊñá‰ª∂ÈÉΩÂ∑≤ÊòØÁõÆÊ†áÈÖçÁΩÆÔºåÊó†ÈúÄ‰øÆÊîπ„ÄÇ")

def update_yaml_config_with_target(file_path: Path, target_config: Dict[str, Any]) -> bool:
    """
    ‰ΩøÁî®ÊåáÂÆöÁöÑÁõÆÊ†áÈÖçÁΩÆÊõ¥Êñ∞Âçï‰∏™YAMLÈÖçÁΩÆÊñá‰ª∂
    """
    try:
        # ËØªÂèñYAMLÊñá‰ª∂
        with open(file_path, 'r', encoding='utf-8') as f:
            data = yaml.safe_load(f)
        
        modified = False
        target_model_name = target_config.get('model_name')
        target_model_class = target_config.get('class')
        target_model_config = target_config.get('config')
        
        # Ê£ÄÊü•modelsÈÖçÁΩÆ
        if 'models' in data:
            # Ëé∑ÂèñÂΩìÂâçÊâÄÊúâÊ®°ÂûãÂêçÁß∞
            current_model_names = list(data['models'].keys())
            
            # Ê∏ÖÁ©∫Áé∞ÊúâÊ®°ÂûãÈÖçÁΩÆ
            data['models'].clear()
            
            # Ê∑ªÂä†Êñ∞ÁöÑÊ®°ÂûãÈÖçÁΩÆ
            data['models'][target_model_name] = {
                'class': target_model_class,
                'name': target_model_name,
                'config': target_model_config
            }
            
            if current_model_names:
                print(f"  ‚úì Â∑≤Â∞ÜÊ®°ÂûãÈÖçÁΩÆÊõ¥Êñ∞‰∏∫ {target_model_name} ({target_model_class})")
                modified = True
        
        # Ê£ÄÊü•Âπ∂Êõ¥Êñ∞tasks‰∏≠ÁöÑllm_model_nameÂºïÁî®
        if 'tasks' in data:
            # Â§ÑÁêÜtasks‰∏∫Â≠óÂÖ∏ÁöÑÊÉÖÂÜµ
            if isinstance(data['tasks'], dict):
                for task_name, task_config in data['tasks'].items():
                    if isinstance(task_config, dict) and 'config' in task_config:
                        current_model = task_config['config'].get('llm_model_name')
                        if current_model and current_model != target_model_name:
                            task_config['config']['llm_model_name'] = target_model_name
                            modified = True
                            print(f"  ‚úì Â∑≤Êõ¥Êñ∞‰ªªÂä° {task_name} ÁöÑ llm_model_name: {current_model} -> {target_model_name}")
            
            # Â§ÑÁêÜtasks‰∏∫ÂàóË°®ÁöÑÊÉÖÂÜµ
            elif isinstance(data['tasks'], list):
                for i, task_config in enumerate(data['tasks']):
                    if isinstance(task_config, dict) and 'config' in task_config:
                        current_model = task_config['config'].get('llm_model_name')
                        if current_model and current_model != target_model_name:
                            task_config['config']['llm_model_name'] = target_model_name
                            modified = True
                            print(f"  ‚úì Â∑≤Êõ¥Êñ∞‰ªªÂä°ÂàóË°®Á¨¨ {i+1} È°πÁöÑ llm_model_name: {current_model} -> {target_model_name}")
        
        # Â¶ÇÊûúÊúâ‰øÆÊîπÔºåÂÜôÂõûÊñá‰ª∂
        if modified:
            with open(file_path, 'w', encoding='utf-8') as f:
                yaml.dump(data, f, default_flow_style=False, allow_unicode=True, 
                         sort_keys=False, indent=2)
            return True
        else:
            print(f"  - Êó†ÈúÄ‰øÆÊîπ")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Â§ÑÁêÜÊñá‰ª∂Êó∂Âá∫Èîô: {e}")
        return False

if __name__ == '__main__':
    # Ê£ÄÊü•ÊòØÂê¶ÊúâÂëΩ‰ª§Ë°åÂèÇÊï∞‰º†ÂÖ•ÈÖçÁΩÆÊñá‰ª∂
    if len(sys.argv) > 1:
        config_file = sys.argv[1]
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                external_config = json.load(f)
            main(external_config)
        except Exception as e:
            print(f"‚ùå ËØªÂèñÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•: {e}")
            sys.exit(1)
    else:
        main()